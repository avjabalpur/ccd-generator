/**
 * Copyright 2008-2014 Mohawk College of Applied Arts and Technology
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you 
 * may not use this file except in compliance with the License. You may 
 * obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 * License for the specific language governing permissions and limitations under 
 * the License.
 * 
 * User: fyfej
 * Date: 3-6-2013
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.IO;
using MARC.Everest.Connectors;
using MARC.Everest.Formatters.XML.Datatypes.R1;
using System.Diagnostics;

namespace MARC.Everest.Test
{
    [TestClass]
    public class Instance020403Test
    {

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }


        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN100000CA()
        {
            MemoryStream stream = new MemoryStream();
                    
            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN100000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN200000CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN200000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                //Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN300001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN300001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN300002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN300002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN300003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN300003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN300101CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN300101CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN300102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN300102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN300103CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN300103CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN300201CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN300201CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN300202CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN300202CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN301001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN301001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN301002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN301002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN301003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN301003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN400001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN400001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN400002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN400002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN400003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN400003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN500001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN500001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN600001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN600001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN600002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN600002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN600003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN600003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN700001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN700001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN700002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN700002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_COMT_IN700003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("COMT_IN700003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN400001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN400001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN400002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN400002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN400003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN400003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN400005CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN400005CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN400006CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN400006CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN400007CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN400007CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN400011CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN400011CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN404001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN404001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN404002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN404002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN404003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN404003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN404101CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN404101CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN404102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN404102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN404103CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN404103CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN500102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN500102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN510102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN510102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN600102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN600102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN610102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN610102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN620102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN620102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN630102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN630102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_FICR_IN630202CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("FICR_IN630202CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_MCCI_IN000002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("MCCI_IN000002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_MCCI_IN100001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("MCCI_IN100001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_MCCI_IN100003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("MCCI_IN100003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_MCCI_IN100004CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("MCCI_IN100004CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_MCCI_IN100005CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("MCCI_IN100005CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_MCCI_IN102002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("MCCI_IN102002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_MCCI_IN102003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("MCCI_IN102003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN010020CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN010020CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN010030CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN010030CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN010040CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN010040CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN010070CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN010070CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN010080CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN010080CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN010090CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN010090CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN020010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN020010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN020020CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN020020CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN021010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN021010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN021020CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN021020CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN070010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN070010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POIZ_IN070020CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POIZ_IN070020CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                // TODO: Fix the schema for this test. It appears there is a structure in MIFv2 that wasn't represented in the schema
                //Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN111100CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN111100CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN111102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN111102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN121000CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN121000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN121001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN121001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN122102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN122102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN122103CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN122103CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN124200CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN124200CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                // TODO: Fix the schema for this test. It appears there is a structure in MIFv2 that wasn't represented in the schema
                //Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN134000CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN134000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN134001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN134001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN211000CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN211000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN222000CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN222000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN222300CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN222300CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN224100CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN224100CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                // TODO: Fix the schema for this test. It appears there is a structure in MIFv2 that wasn't represented in the schema
                //Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN224200CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN224200CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                // TODO: Fix the schema for this test. It appears there is a structure in MIFv2 that wasn't represented in the schema
                //Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN224201CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN224201CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                // TODO: Fix the schema for this test. It appears there is a structure in MIFv2 that wasn't represented in the schema
                //Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN224202CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN224202CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                // TODO: Fix the schema for this test. It appears there is a structure in MIFv2 that wasn't represented in the schema
                //Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN351000CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN351000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN354000CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN354000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN354005CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN354005CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN361000CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN361000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                // TODO: Fix the schema for this test. It appears there is a structure in MIFv2 that wasn't represented in the schema
                //Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN364000CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN364000CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                // TODO: Fix the schema for this test. It appears there is a structure in MIFv2 that wasn't represented in the schema
                //Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POLB_IN364006CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POLB_IN364006CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POME_IN010010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POME_IN010010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POME_IN010020CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POME_IN010020CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POME_IN010050CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POME_IN010050CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POME_IN010060CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POME_IN010060CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POME_IN010070CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POME_IN010070CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_POME_IN010080CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("POME_IN010080CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010060CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010060CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010070CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010070CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010080CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010080CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010090CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010090CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010100CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010100CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010110CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010110CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010120CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010120CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010300CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010300CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010380CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010380CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010390CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010390CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010400CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010400CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010420CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010420CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010440CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010440CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010450CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010450CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010460CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010460CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010520CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010520CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010530CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010530CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010540CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010540CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010560CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010560CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010570CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010570CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010580CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010580CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010630CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010630CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010640CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010640CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010650CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010650CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010720CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010720CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010730CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010730CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010740CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010740CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010840CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010840CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010850CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010850CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010860CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010860CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN010940CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN010940CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN011040CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN011040CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN011050CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN011050CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020060CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020060CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020080CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020080CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020090CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020090CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020100CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020100CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020130CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020130CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020140CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020140CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020190CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020190CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020210CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020210CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020220CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020220CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020230CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020230CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020330CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020330CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020340CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020340CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020370CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020370CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020380CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020380CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN020390CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN020390CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN040020CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN040020CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN040030CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN040030CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN040040CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN040040CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN040070CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN040070CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN040080CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN040080CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN040090CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN040090CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN050010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN050010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN050020CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN050020CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN050030CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN050030CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN050040CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN050040CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060020CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060020CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060050CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060050CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060060CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060060CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060070CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060070CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060080CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060080CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060090CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060090CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060100CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060100CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060110CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060110CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060120CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060120CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060130CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060130CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060140CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060140CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060170CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060170CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060180CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060180CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060210CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060210CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060220CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060220CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060230CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060230CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060240CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060240CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060250CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060250CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060260CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060260CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060270CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060270CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060280CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060280CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060290CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060290CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060300CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060300CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060350CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060350CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060360CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060360CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060370CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060370CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060380CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060380CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060390CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060390CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060400CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060400CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060450CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060450CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060460CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060460CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060470CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060470CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060480CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060480CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060490CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060490CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PORX_IN060500CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PORX_IN060500CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101004CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101004CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101101CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101101CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101103CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101103CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101104CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101104CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101105CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101105CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101106CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101106CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101201CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101201CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101202CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101202CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101203CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101203CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101204CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101204CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101205CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101205CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101206CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101206CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN101999CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN101999CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202011CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202011CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202015CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202015CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202016CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202016CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202018CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202018CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202019CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202019CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202305CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202305CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202307CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202307CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202308CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202308CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202311CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202311CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPA_IN202314CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPA_IN202314CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN301010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN301010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN301011CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN301011CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN301030CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN301030CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN303010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN303010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN303011CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN303011CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN303030CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN303030CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN306010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN306010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN306011CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN306011CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN306050CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN306050CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_PRPM_IN306051CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("PRPM_IN306051CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_QUCR_IN800102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("QUCR_IN800102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_QUCR_IN810102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("QUCR_IN810102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_QUCR_IN820102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("QUCR_IN820102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_QUCR_IN830102CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("QUCR_IN830102CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_QUQI_IN000003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("QUQI_IN000003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_RCMR_IN010001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("RCMR_IN010001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_RCMR_IN010002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("RCMR_IN010002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_RCMR_IN010003CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("RCMR_IN010003CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_RCMR_IN010004CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("RCMR_IN010004CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_RCMR_IN010005CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("RCMR_IN010005CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_RCMR_IN010006CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("RCMR_IN010006CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000001CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000001CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000002CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000002CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000004CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000004CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000005CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000005CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000006CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000006CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000008CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000008CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000009CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000009CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000010CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000010CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000012CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000012CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000013CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000013CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000014CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000014CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000015CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000015CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000016CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000016CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000017CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000017CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000018CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000018CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000020CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000020CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000021CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000021CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000022CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000022CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000023CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000023CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000024CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000024CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000025CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000025CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000026CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000026CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000028CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000028CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000029CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000029CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000030CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000030CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000032CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000032CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000033CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000033CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000034CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000034CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000041CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000041CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000042CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000042CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000044CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000044CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000045CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000045CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000046CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000046CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000051CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000051CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000052CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000052CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000053CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000053CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000054CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000054CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000055CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000055CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000064CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000064CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000065CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000065CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000066CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000066CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000067CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000067CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000068CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000068CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000070CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000070CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000071CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000071CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000072CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000072CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000073CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000073CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000074CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000074CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000075CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000075CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000076CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000076CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000077CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000077CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000078CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000078CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000079CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000079CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000080CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000080CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000081CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000081CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000084CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000084CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000085CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000085CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000086CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000086CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000087CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000087CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000088CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000088CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000089CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000089CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000090CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000090CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000091CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000091CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000092CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000092CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000093CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000093CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000094CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000094CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000095CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000095CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000096CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000096CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000097CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000097CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN000098CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN000098CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN040100CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN040100CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN040200CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN040200CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN041100CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN041100CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }

        [TestMethod]
        public void Instance020403Test_XSD_REPC_IN041200CA()
        {
            MemoryStream stream = new MemoryStream();

            try
            {
                IResultDetail[] details = null;
                XMLGenerator.GenerateInstance(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA), stream, out details);

                if (details.Length > 0)
                    foreach (var item in details)
                        if (item.Type == ResultDetailType.Error)
                            Tracer.Trace(item.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }

            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            string xml = new StreamReader(stream).ReadToEnd();

            stream.Seek(0, SeekOrigin.Begin);
            stream.Flush();

            var result = XMLValidator.Validate("REPC_IN041200CA", stream, typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA));

            if (result.Count > 0)
            {
                result.ForEach(item => Trace.WriteLine(item));
                Assert.Fail("Validation failed");
            }
        }


        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN100000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN200000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN300001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN300002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN300003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN300101CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN300102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN300103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN300201CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN300202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN301001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN301002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN301003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN400001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN400002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN400003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN500001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN600001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN600002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN600003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN700001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN700002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_COMT_IN700003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN400001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN400002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN400003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN400005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN400006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN400007CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN400011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN404001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN404002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN404003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN404101CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN404102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN404103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN500102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN510102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN600102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN610102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN620102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN630102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_FICR_IN630202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_MCCI_IN000002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_MCCI_IN100001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_MCCI_IN100003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_MCCI_IN100004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_MCCI_IN100005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_MCCI_IN102002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_MCCI_IN102003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN010020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN010030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN010040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN010070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN010080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN010090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN020010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN020020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN021010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN021020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN070010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POIZ_IN070020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN111100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN111102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN121000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN121001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN122102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN122103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN124200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN134000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN134001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN211000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN222000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN222300CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN224100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN224200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN224201CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN224202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN351000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN354000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN354005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN361000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN364000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POLB_IN364006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POME_IN010010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POME_IN010020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POME_IN010050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POME_IN010060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POME_IN010070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_POME_IN010080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010110CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010120CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010300CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010380CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010390CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010400CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010420CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010440CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010450CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010460CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010520CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010530CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010540CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010560CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010570CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010580CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010630CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010640CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010650CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010720CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010730CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010740CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010840CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010850CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010860CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN010940CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN011040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN011050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020130CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020140CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020190CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020210CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020220CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020230CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020330CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020340CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020370CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020380CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN020390CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN040020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN040030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN040040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN040070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN040080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN040090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN050010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN050020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN050030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN050040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060110CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060120CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060130CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060140CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060170CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060180CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060210CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060220CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060230CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060240CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060250CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060260CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060270CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060280CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060290CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060300CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060350CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060360CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060370CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060380CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060390CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060400CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060450CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060460CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060470CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060480CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060490CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PORX_IN060500CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101101CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101104CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101105CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101106CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101201CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101203CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101204CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101205CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101206CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN101999CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202015CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202016CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202018CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202019CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202305CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202307CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202308CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202311CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPA_IN202314CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN301010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN301011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN301030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN303010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN303011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN303030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN306010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN306011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN306050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_PRPM_IN306051CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_QUCR_IN800102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_QUCR_IN810102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_QUCR_IN820102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_QUCR_IN830102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_QUQI_IN000003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_RCMR_IN010001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_RCMR_IN010002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_RCMR_IN010003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_RCMR_IN010004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_RCMR_IN010005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_RCMR_IN010006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000008CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000009CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000012CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000013CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000014CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000015CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000016CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000017CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000018CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000021CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000022CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000023CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000024CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000025CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000026CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000028CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000029CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000032CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000033CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000034CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000041CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000042CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000044CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000045CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000046CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000051CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000052CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000053CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000054CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000055CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000064CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000065CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000066CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000067CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000068CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000071CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000072CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000073CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000074CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000075CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000076CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000077CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000078CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000079CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000081CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000084CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000085CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000086CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000087CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000088CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000089CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000091CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000092CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000093CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000094CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000095CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000096CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000097CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN000098CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN040100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN040200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN041100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultMultiprocessor_REPC_IN041200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat; ;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN100000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN200000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN300001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN300002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN300003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN300101CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN300102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN300103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN300201CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN300202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN301001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN301002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN301003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN400001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN400002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN400003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN500001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN600001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN600002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN600003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN700001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN700002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_COMT_IN700003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN400001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN400002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN400003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN400005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN400006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN400007CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN400011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN404001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN404002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN404003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN404101CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN404102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN404103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN500102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN510102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN600102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN610102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN620102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN630102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_FICR_IN630202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_MCCI_IN000002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_MCCI_IN100001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_MCCI_IN100003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_MCCI_IN100004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_MCCI_IN100005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_MCCI_IN102002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_MCCI_IN102003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN010020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN010030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN010040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN010070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN010080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN010090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN020010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN020020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN021010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN021020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN070010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POIZ_IN070020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN111100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN111102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN121000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN121001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN122102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN122103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN124200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN134000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN134001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN211000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN222000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN222300CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN224100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN224200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN224201CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN224202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN351000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN354000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN354005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN361000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN364000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POLB_IN364006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POME_IN010010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POME_IN010020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POME_IN010050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POME_IN010060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POME_IN010070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_POME_IN010080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010110CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010120CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010300CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010380CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010390CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010400CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010420CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010440CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010450CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010460CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010520CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010530CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010540CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010560CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010570CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010580CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010630CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010640CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010650CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010720CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010730CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010740CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010840CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010850CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010860CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN010940CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN011040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN011050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020130CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020140CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020190CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020210CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020220CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020230CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020330CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020340CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020370CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020380CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN020390CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN040020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN040030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN040040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN040070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN040080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN040090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN050010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN050020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN050030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN050040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060110CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060120CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060130CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060140CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060170CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060180CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060210CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060220CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060230CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060240CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060250CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060260CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060270CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060280CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060290CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060300CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060350CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060360CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060370CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060380CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060390CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060400CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060450CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060460CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060470CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060480CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060490CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PORX_IN060500CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101101CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101104CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101105CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101106CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101201CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101203CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101204CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101205CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101206CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN101999CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202015CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202016CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202018CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202019CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202305CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202307CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202308CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202311CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPA_IN202314CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN301010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN301011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN301030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN303010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN303011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN303030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN306010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN306011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN306050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_PRPM_IN306051CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_QUCR_IN800102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_QUCR_IN810102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_QUCR_IN820102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_QUCR_IN830102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_QUQI_IN000003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_RCMR_IN010001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_RCMR_IN010002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_RCMR_IN010003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_RCMR_IN010004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_RCMR_IN010005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_RCMR_IN010006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000008CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000009CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000012CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000013CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000014CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000015CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000016CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000017CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000018CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000021CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000022CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000023CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000024CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000025CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000026CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000028CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000029CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000032CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000033CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000034CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000041CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000042CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000044CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000045CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000046CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000051CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000052CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000053CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000054CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000055CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000064CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000065CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000066CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000067CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000068CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000071CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000072CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000073CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000074CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000075CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000076CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000077CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000078CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000079CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000081CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000084CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000085CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000086CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000087CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000088CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000089CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000091CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000092CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000093CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000094CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000095CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000096CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000097CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN000098CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN040100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN040200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN041100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultUniprocessor_REPC_IN041200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseReflectionFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN100000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN100000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN200000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN200000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN300001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN300002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN300003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN300101CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300101CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN300102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN300103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN300201CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300201CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN300202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN300202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN301001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN301002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN301003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN301003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN400001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN400002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN400003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN400003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN500001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN500001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN600001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN600002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN600003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN600003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN700001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN700002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_COMT_IN700003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.COMT_IN700003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN400001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN400002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN400003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN400005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN400006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN400007CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400007CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN400011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN400011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN404001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN404002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN404003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN404101CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404101CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN404102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN404103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN404103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN500102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN500102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN510102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN510102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN600102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN600102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN610102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN610102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN620102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN620102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN630102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_FICR_IN630202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.FICR_IN630202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_MCCI_IN000002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN000002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_MCCI_IN100001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_MCCI_IN100003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_MCCI_IN100004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_MCCI_IN100005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN100005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_MCCI_IN102002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_MCCI_IN102003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.MCCI_IN102003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN010020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN010030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN010040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN010070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN010080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN010090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN010090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN020010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN020020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN020020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN021010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN021020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN021020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN070010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POIZ_IN070020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POIZ_IN070020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN111100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN111102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN111102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN121000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN121001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN121001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN122102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN122103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN122103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN124200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN124200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN134000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN134001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN134001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN211000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN211000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN222000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN222300CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN222300CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN224100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN224200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN224201CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224201CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN224202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN224202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN351000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN351000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN354000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN354005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN354005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN361000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN361000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN364000CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364000CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POLB_IN364006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POLB_IN364006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POME_IN010010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POME_IN010020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POME_IN010050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POME_IN010060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POME_IN010070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_POME_IN010080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.POME_IN010080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010110CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010110CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010120CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010120CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010300CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010300CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010380CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010380CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010390CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010390CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010400CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010400CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010420CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010420CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010440CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010440CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010450CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010450CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010460CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010460CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010520CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010520CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010530CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010530CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010540CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010540CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010560CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010560CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010570CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010570CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010580CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010580CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010630CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010630CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010640CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010640CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010650CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010650CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010720CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010720CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010730CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010730CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010740CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010740CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010840CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010840CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010850CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010850CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010860CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010860CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN010940CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN010940CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN011040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN011050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN011050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020130CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020130CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020140CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020140CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020190CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020190CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020210CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020210CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020220CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020220CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020230CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020230CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020330CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020330CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020340CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020340CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020370CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020370CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020380CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020380CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN020390CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN020390CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN040020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN040030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN040040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN040070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN040080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN040090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN040090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN050010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN050020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN050030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN050040CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN050040CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060060CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060060CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060110CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060110CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060120CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060120CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060130CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060130CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060140CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060140CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060170CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060170CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060180CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060180CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060210CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060210CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060220CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060220CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060230CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060230CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060240CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060240CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060250CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060250CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060260CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060260CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060270CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060270CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060280CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060280CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060290CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060290CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060300CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060300CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060350CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060350CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060360CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060360CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060370CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060370CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060380CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060380CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060390CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060390CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060400CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060400CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060450CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060450CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060460CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060460CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060470CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060470CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060480CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060480CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060490CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060490CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PORX_IN060500CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PORX_IN060500CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101101CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101101CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101103CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101103CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101104CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101104CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101105CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101105CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101106CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101106CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101201CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101201CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101202CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101202CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101203CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101203CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101204CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101204CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101205CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101205CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101206CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101206CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN101999CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN101999CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202015CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202015CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202016CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202016CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202018CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202018CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202019CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202019CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202305CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202305CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202307CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202307CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202308CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202308CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202311CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202311CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPA_IN202314CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPA_IN202314CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN301010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN301011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN301030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN301030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN303010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN303011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN303030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN303030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN306010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN306011CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306011CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN306050CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306050CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_PRPM_IN306051CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.PRPM_IN306051CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_QUCR_IN800102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN800102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_QUCR_IN810102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN810102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_QUCR_IN820102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN820102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_QUCR_IN830102CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUCR_IN830102CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_QUQI_IN000003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.QUQI_IN000003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_RCMR_IN010001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_RCMR_IN010002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_RCMR_IN010003CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010003CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_RCMR_IN010004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_RCMR_IN010005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_RCMR_IN010006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.RCMR_IN010006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000001CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000001CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000002CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000002CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000004CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000004CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000005CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000005CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000006CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000006CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000008CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000008CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000009CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000009CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000010CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000010CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000012CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000012CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000013CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000013CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000014CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000014CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000015CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000015CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000016CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000016CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000017CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000017CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000018CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000018CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000020CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000020CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000021CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000021CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000022CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000022CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000023CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000023CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000024CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000024CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000025CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000025CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000026CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000026CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000028CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000028CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000029CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000029CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000030CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000030CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000032CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000032CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000033CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000033CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000034CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000034CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000041CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000041CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000042CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000042CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000044CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000044CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000045CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000045CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000046CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000046CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000051CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000051CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000052CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000052CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000053CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000053CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000054CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000054CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000055CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000055CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000064CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000064CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000065CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000065CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000066CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000066CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000067CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000067CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000068CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000068CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000070CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000070CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000071CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000071CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000072CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000072CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000073CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000073CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000074CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000074CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000075CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000075CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000076CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000076CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000077CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000077CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000078CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000078CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000079CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000079CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000080CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000080CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000081CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000081CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000084CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000084CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000085CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000085CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000086CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000086CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000087CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000087CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000088CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000088CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000089CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000089CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000090CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000090CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000091CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000091CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000092CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000092CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000093CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000093CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000094CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000094CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000095CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000095CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000096CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000096CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000097CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000097CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN000098CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN000098CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN040100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN040200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN040200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN041100CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041100CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }
        [TestMethod]
        public void Instance020403Test_FMTR_DefaultLegacy_REPC_IN041200CA()
        {

            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA original = TypeCreator.GetCreator(typeof(MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA)).CreateInstance() as MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA;

            // New ms
            MemoryStream ms = new MemoryStream();

            // Format
            MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter fmtr = new MARC.Everest.Formatters.XML.ITS1.XmlIts1Formatter();

            fmtr.Settings = MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowFlavorImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.AllowSupplierDomainImposing | MARC.Everest.Formatters.XML.ITS1.SettingsType.UseGeneratorFormat;
            fmtr.GraphAides.Add(new MARC.Everest.Formatters.XML.Datatypes.R1.DatatypeFormatter() { CompatibilityMode = DatatypeFormatterCompatibilityMode.Canadian });
            fmtr.ValidateConformance = false;
            var graphResult = fmtr.Graph(ms, original);

            Assert.IsTrue(graphResult.Code == MARC.Everest.Connectors.ResultCode.Accepted || graphResult.Code == MARC.Everest.Connectors.ResultCode.AcceptedNonConformant);

            // Seek back to begin
            ms.Seek(0, SeekOrigin.Begin);

            // Parse
            MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA parsed = (MARC.Everest.RMIM.CA.R020403.Interactions.REPC_IN041200CA)fmtr.Parse(ms, original.GetType().Assembly).Structure;

            // Assert
            Assert.AreEqual(original.Id, parsed.Id);
            Assert.AreEqual(original.CreationTime, parsed.CreationTime);
            Assert.AreEqual(original.SecurityText, parsed.SecurityText);
            Assert.AreEqual(original.ResponseModeCode, parsed.ResponseModeCode);
            Assert.AreEqual(original.VersionCode, parsed.VersionCode);
            Assert.AreEqual(original.InteractionId, parsed.InteractionId);
            Assert.AreEqual(original.ProfileId, parsed.ProfileId);
            Assert.AreEqual(original.ProcessingCode, parsed.ProcessingCode);
            Assert.AreEqual(original.ProcessingModeCode, parsed.ProcessingModeCode);
            Assert.AreEqual(original.AcceptAckCode, parsed.AcceptAckCode);
            Assert.AreEqual(original.Receiver, parsed.Receiver);
            Assert.AreEqual(original.RespondTo, parsed.RespondTo);
            Assert.AreEqual(original.Sender, parsed.Sender);
            Assert.AreEqual(original.Acknowledgement, parsed.Acknowledgement);
            Assert.AreEqual(original.controlActEvent, parsed.controlActEvent);
            Assert.AreEqual(original.NullFlavor, parsed.NullFlavor);
            Assert.AreEqual(original.RealmCode, parsed.RealmCode);
            Assert.AreEqual(original.TypeId, parsed.TypeId);
            Assert.AreEqual(original.TemplateId, parsed.TemplateId);

        }



    }
}